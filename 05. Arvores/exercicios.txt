A partir dos códigos arvore1.c e arvore.h, faça os seguintes métodos como exercícios. 

1) método que recebe um valor e um ponteiro para uma árvore e retorna quantas vezes esse valor
aparece na árvore

int contarVezes(int valor, Arvore *raiz) {
    if (raiz) {
        int qtdVezesEsquerda = contarVezes(valor, raiz->esq);//empilhar tudo para esquerda
        int qtdVezesDireita = contarVezes(valor, raiz->dir);//empilhar tudo para direita

        //so então testar, ou seja, o teste vem das folhas em direção a raiz
        if (valor == raiz->valor) return 1 + qtdVezesEsquerda + qtdVezesDireita;
        return 0 + qtdVezesEsquerda + qtdVezesDireita;
    } else {
        return 0;
    }
}

2) método que recebe um valor e um ponteiro para uma árvore e retorna quantos números da árvore 
são múltiplos desse valor

int multiplos(int valor, Arvore *raiz) {
    if (raiz) {
        int qtdVezesEsquerda = multiplos(valor, raiz->esq);//empilhar tudo para esquerda
        int qtdVezesDireita = multiplos(valor, raiz->dir);//empilhar tudo para direita

        //so então testar, ou seja, o teste vem das folhas em direção a raiz
        if (raiz->valor % valor == 0) return 1 + qtdVezesEsquerda + qtdVezesDireita;
        return 0 + qtdVezesEsquerda + qtdVezesDireita;
    } else {
        return 0;
    }
}

3) método que recebe um ponteiro para uma árvore e retorna quantos nós folhas há na árvore. 
Lembre que um nó folha é aquele que não possui filho nem na esquerda e nem na direita

int contarFolhas(Arvore *raiz){
    if (raiz) {
        if (!raiz->esq && !raiz->dir) return 1;
        return contarFolhas(raiz->esq) + contarFolhas(raiz->dir);
    } else {
        return 0;
    }
}

4) método que recebe um ponteiro para uma árvore e retorna quantos nós não folhas há na árvore.

int contarNaoFolhas(Arvore *raiz){
    if (raiz) {
        if (raiz->esq || raiz->dir) return 1 + contarNaoFolhas(raiz->esq) + contarNaoFolhas(raiz->dir);
    } 
    return 0;
}

5) rotina que recebe um valor e um ponteiro para uma árvore e retorna 1 se o valor está em um nível
par, caso contrário retorna 0.

int nivel = localizarNivel(valorPesquisa, raiz);
    if (nivel != -1) {
        printf("Valor localizado na árvore no nível %d\n", nivel);
        if (nivel % 2 == 0) {
            printf("Valor está em um nível par\n");
        }
    } else {
        printf("Valor não localizado na árvore\n");
    }


6) método que recebe um ponteiro para uma árvore de pesquisa (ordenada) e retorna o menor valor

7) método que recebe um ponteiro para uma árvore de pesquisa (ordenada) e retorna o maior valor

8) rotina que recebe um valor e um ponteiro para uma árvore de pesquisa (ordenada) e apaga
todas as ocorrências do valor na árvore