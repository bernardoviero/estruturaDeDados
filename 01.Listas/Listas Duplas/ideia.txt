Listas Encadeadas Duplamente:
    - Possui o mesmo princípio de qualquer lista: ordenação e controle de duplicidade
    - Também têm as operações clássicas: percorrer; inserir; remover; alterar; destruir
    - A grande diferença é que existem 2 ponteiros:
        - prox -> que aponta para o próximo elemento da lista. Então, é possível 'caminhar' na lista da esquerda para direita
        - ant -> que aponta para o elemento anterior da lista. Então, é possível 'caminhar' da direita para a esquerda
        - Dessa forma, o struct modifica

typedef struct noD {
    int valor;
    struct noD *ant;
    struct noD *prox;
}CelulaD;

Um elemento é composto de no mínimo 3 atributos.

A           B           C           D
. 10 b     a 20 c      b 30 d      c 40 .

listaD A    p            


p = B
p->valor =  20
p->ant   =  A
p->prox  =  C

p->ant->valor =  10
p->ant->ant   =   .
p->ant->prox  =   b

p->prox->valor = 30
p->prox->ant   = b
p->prox->prox  = d

//avançar da esquerda para direita
for (p = listaD; p != NULL; p = p->prox){

}

//retroceder da direita para esquerda
for (p = listaD; p != NULL; p = p->ant){

}
=============
//avançar da esquerda para direita parando no último
for (p = listaD; p->prox != NULL; p = p->prox){

}

//retroceder da direita para esquerda parando no primeiro
for (p = listaD; p->ant != NULL; p = p->ant){

}

Vantagens de usar listas duplas:
    - mobilidade na lista
    - remoção

A                 C           D
. 10 c           a 30 d      c 40 .

listaD A    p 



p->ant->prox = p->prox;
p->prox->ant = p->ant;
free(p);